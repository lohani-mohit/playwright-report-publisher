name: "Playwright Report Publisher"
description: "Publish Playwright test reports to GCS, Slack, and GitHub PR comments"
author: "Mohit Lohani"
branding:
  icon: "upload-cloud"
  color: "blue"

inputs:
  report-directory:
    description: "Directory containing the Playwright report"
    required: false
    default: "playwright-report"
  environment:
    description: "Environment the tests were run against"
    required: true
    default: "dev"
  post-to:
    description: "Where to post the results (github, slack, both, or none)"
    required: false
    default: "both"
  working-directory:
    description: "Directory containing Playwright tests"
    required: false
    default: "tests"
  gcs-bucket:
    description: "GCS bucket name for uploading reports"
    required: false
    default: "website_playwright_reports"
  report-prefix:
    description: "Prefix for the report folder in GCS (e.g., 'regression', 'sanity')"
    required: false
    default: "test-report"
  github-token:
    description: "GitHub token for PR comments"
    required: true
    default: ${{ github.token }}
  gcp-sa-key:
    description: "GCP service account key (JSON) for GCS uploads"
    required: true
  slack-webhook-url:
    description: "Slack webhook URL for posting results"
    required: false
  test-status:
    description: "Status of the tests (passed or failed). If not provided, will be determined from the report."
    required: false

outputs:
  report-url:
    description: "URL to the published Playwright report"
    value: ${{ steps.generate-paths.outputs.report-url }}
  test-status:
    description: "Status of the tests (passed or failed)"
    value: ${{ steps.check-status.outputs.status }}

runs:
  using: "composite"
  steps:
    - name: Setup GCP authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ inputs.gcp-sa-key }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Generate timestamp and report path
      id: generate-paths
      shell: bash
      run: |
        TIMESTAMP=$(date +%s)
        ENV="${{ inputs.environment }}"
        PREFIX="${{ inputs.report-prefix }}"

        # Set GCS path
        GCS_PATH="gs://${{ inputs.gcs-bucket }}/${PREFIX}-${ENV}/${TIMESTAMP}"
        REPORT_URL="https://storage.googleapis.com/${{ inputs.gcs-bucket }}/${PREFIX}-${ENV}/${TIMESTAMP}/index.html"

        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "gcs-path=${GCS_PATH}" >> $GITHUB_OUTPUT
        echo "report-url=${REPORT_URL}" >> $GITHUB_OUTPUT

    - name: Upload Playwright report to GCS
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        if [ -d "${{ inputs.report-directory }}/html-report" ]; then
          gsutil -m cp -r ${{ inputs.report-directory }}/html-report/* ${{ steps.generate-paths.outputs.gcs-path }}
        else
          gsutil -m cp -r ${{ inputs.report-directory }}/* ${{ steps.generate-paths.outputs.gcs-path }}
        fi
        echo "Report uploaded to: ${{ steps.generate-paths.outputs.report-url }}"

    - name: Check test status
      id: check-status
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}

        # If test status is provided as input, use that
        if [ -n "${{ inputs.test-status }}" ]; then
          echo "status=${{ inputs.test-status }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Otherwise determine from report
        if [ -f "${{ inputs.report-directory }}/pw_report.json" ]; then
          if grep -q '"status":"failed"' ${{ inputs.report-directory }}/pw_report.json; then
            echo "status=failed" >> $GITHUB_OUTPUT
          else
            echo "status=passed" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=unknown" >> $GITHUB_OUTPUT
          echo "Warning: Could not determine test status from report"
        fi

    - name: Get last commit message
      id: get-commit
      if: ${{ inputs.post-to == 'slack' || inputs.post-to == 'both' }}
      shell: bash
      run: |
        LAST_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        echo "last-commit=${LAST_COMMIT_MSG}" >> $GITHUB_OUTPUT

    - name: Post test results to Slack
      if: ${{ (inputs.post-to == 'slack' || inputs.post-to == 'both') && inputs.slack-webhook-url != '' }}
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        node ${{ github.action_path }}/scripts/post-to-slack.js
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
        REPORT_URL: ${{ steps.generate-paths.outputs.report-url }}
        LAST_COMMIT_MSG: ${{ steps.get-commit.outputs.last-commit }}
        TEST_STATUS: ${{ steps.check-status.outputs.status }}
        ENVIRONMENT: ${{ inputs.environment }}
        REPORT_PREFIX: ${{ inputs.report-prefix }}

    - name: Post test results as GitHub PR comment
      if: ${{ (inputs.post-to == 'github' || inputs.post-to == 'both') && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        node ${{ github.action_path }}/scripts/post-to-github.js
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        REPORT_URL: ${{ steps.generate-paths.outputs.report-url }}
        TEST_STATUS: ${{ steps.check-status.outputs.status }}
        PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
